from html import escape

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from telethon import errors

from bot.states.states import AuthStates, HistoryStates, LogoutState
from client.client import get_client

router = Router()
phone_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
], resize_keyboard=True)


@router.message(Command('login'))
async def start_command(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard)
    await state.set_state(AuthStates.waiting_for_phone)


@router.message(AuthStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text
    telethon_client = get_client(f'session_{phone}')
    await state.update_data(phone=phone)
    await telethon_client.connect()
    if not await telethon_client.is_user_authorized():
        try:
            code = await telethon_client.send_code_request(phone)
            code_hash = code.phone_code_hash
            await state.update_data(code_hash=code_hash)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
            await state.set_state(AuthStates.waiting_for_code)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
            await telethon_client.disconnect()
            await state.clear()
    else:
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        await state.clear()


@router.message(AuthStates.waiting_for_code)
async def get_code(message: Message, state: FSMContext):
    code = int(message.text)
    user_data = await state.get_data()
    phone = user_data.get("phone")
    code_hash = user_data.get("code_hash")
    telethon_client = get_client(f'session_{phone}')
    if not telethon_client.is_connected():
        await telethon_client.connect()
    try:
        await telethon_client.sign_in(phone, code, phone_code_hash=code_hash)
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        await state.clear()
    except Exception as e:
        if isinstance(e, errors.SessionPasswordNeededError):
            await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            await state.set_state(AuthStates.waiting_for_password)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {e}")
            await telethon_client.disconnect()
            await state.clear()


@router.message(AuthStates.waiting_for_password)
async def get_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    phone = user_data.get("phone")
    telethon_client = get_client(f'session_{phone}')
    if not telethon_client.is_connected():
        await telethon_client.connect()
    try:
        await telethon_client.sign_in(phone, password=password)
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        await state.clear()


@router.message(Command("history"))
async def history(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ª–æ–≥–∏–Ω–∏–ª–∏—Å—å!!")
    await state.set_state(HistoryStates.waiting_for_phone)


@router.message(HistoryStates.waiting_for_phone)
async def get_history(message: Message, state: FSMContext):
    phone = message.text
    telethon_client = get_client(f'session_{phone}')
    try:
        if not telethon_client.is_connected():
            await telethon_client.connect()
        if not await telethon_client.is_user_authorized():
            await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /login.")
            return
        await state.update_data(phone=phone)
        await state.set_state(HistoryStates.waiting_for_chat_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ chat id")
    finally:
        await telethon_client.disconnect()


@router.message(HistoryStates.waiting_for_chat_id)
async def get_chat_history(message: Message, state: FSMContext):
    user_data = await state.get_data()
    phone = user_data.get("phone")
    telethon_client = get_client(f'session_{phone}')
    try:
        if not telethon_client.is_connected():
            await telethon_client.connect()
        if not await telethon_client.is_user_authorized():
            await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /login.")
            return
        chat_id = int(message.text)
        chat = await telethon_client.get_input_entity(chat_id)
        messages = await telethon_client.get_messages(chat, limit=100)
        if not messages:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        history = "\n\n".join(
            [f"üì© <b>–û—Ç:</b> {msg.sender_id}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {msg.id}\n<b>–¢–µ–∫—Å—Ç:</b> {escape(msg.text)}" for msg in
             messages
             if msg.text]
        )
        if len(history) > 4096:
            allowed_length = 4060
            while len(history) > allowed_length:
                history = history.rsplit('\n\n', 1)[0]
                history += "..."
        await message.answer(f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n{history}", parse_mode="HTML")
    finally:
        await telethon_client.disconnect()
        await state.clear()


@router.message(Command('logout'))
async def logout(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
    await state.set_state(LogoutState.waiting_for_phone)


@router.message(LogoutState.waiting_for_phone)
async def get_logout(message: Message, state: FSMContext):
    phone = message.text
    telethon_client = get_client(f'session_{phone}')
    try:
        if not telethon_client.is_connected():
            await telethon_client.connect()
        if not await telethon_client.is_user_authorized():
            await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return
        await telethon_client.log_out()
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!!!')
    finally:
        await telethon_client.disconnect()
        await state.clear()
